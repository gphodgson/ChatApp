{"version":3,"sources":["components/layout/Header.js","components/Chat.js","components/Chats.js","components/addChat.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","headerStyle","background","textAlign","textDecoration","fontSize","padding","color","Chat","margin","fontWeight","this","props","chat","sent_by","text","Component","Chats","chats","map","key","chat_id","addChat","state","from","placeholder","onChange","e","setState","target","name","value","onSubmit","preventDefault","newChat","formStyle","type","flex","size","display","width","App","Axios","get","then","res","data","updateChats","a","setInterval","className","path","render","Fragment","height","border","overflowX","overflowY","flexDirection","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a12c3c06.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div style = {headerStyle}>\r\n            <header>Chat App</header>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: \"#5c5c5c\",\r\n    textAlign: \"center\",\r\n    textDecoration: \"underline\",\r\n    fontSize: \"40px\",\r\n    padding: \"10px\",\r\n    color: \"#fff\",\r\n\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport class Chat extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{margin: \"10px 10px\"}}>\r\n                <p><span style={{textDecoration: \"underline\", fontWeight: \"bolder\"}}>{this.props.chat.sent_by}</span>: {this.props.chat.text}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chat\r\n","import React, { Component } from 'react'\r\nimport Chat from './Chat';\r\n\r\nexport class Chats extends Component {\r\n    render() {\r\n        return this.props.chats.map((chat) => (\r\n            <Chat chat={chat} key={chat.chat_id}/>\r\n        ));\r\n    }\r\n}\r\n\r\nexport default Chats\r\n","import React, { Component } from 'react'\r\n\r\nexport class addChat extends Component {\r\n    state =\r\n    {\r\n        text: '',\r\n        from: '',\r\n\r\n        placeholder: 'Enter a chat!'\r\n    }\r\n    \r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(this.state.text !== '' && this.state.from !== ''){\r\n            this.props.newChat(this.state.text, this.state.from);\r\n            this.setState({text: '', placeholder: \"Enter a chat!\"});\r\n        }else if(this.state.text === ''){\r\n            this.setState({placeholder: 'Chat cannot be empty!'});\r\n        }else if(this.state.from === ''){\r\n            this.setState({placeholder: 'You must set a username!'});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={formStyle} onSubmit={this.onSubmit}>\r\n                {/* <label for=\"from\" style={{flex: \"0.7\", fontSize: \"20px\"}}> Chat as: </label> */}\r\n                <input\r\n                    type = \"text\"\r\n                    name = \"from\"\r\n                    style = {{flex: \"2\", fontSize: \"20px\"}}\r\n                    placeholder=\"Set a username...\"\r\n                    size=\"1\"\r\n                    value = {this.state.from}\r\n                    onChange = {this.onChange}\r\n                />\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"text\"\r\n                    style={{flex:\"10\", fontSize: \"20px\"}}\r\n                    size=\"1\"\r\n                    placeholder= {this.state.placeholder}\r\n                    value={this.state.text}\r\n                    onChange = {this.onChange}\r\n                />\r\n                <input \r\n                    type=\"submit\" \r\n                    style={{flex:\"0.5\"}} \r\n                    value=\"Send Chat\"\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst formStyle = {\r\n    margin: \"10px 0px\",\r\n    display: \"flex\",\r\n    width: \"100%\",\r\n    fontSize: \"20px\",\r\n    // border: \"1px solid black\"\r\n}\r\n\r\nexport default addChat\r\n","import React, { Component } from 'react'\nimport Axios from 'axios';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Header from './components/layout/Header';\n\nimport Chats from './components/Chats';\nimport AddChat from './components/addChat';\n\nexport class App extends Component {\n  state = \n  {\n    chats: []\n  }\n\n  newChat = (text, sent_by) => \n  {\n    Axios.get('https://gh-api.com:3002/addChat?text='+text+\"&sent_by=\"+sent_by)\n    .then(res => this.setState({chats: [...this.state.chats, res.data]}))\n    // this.setState({chats: [...this.state.chats, {id: uuid(), text, sent_by}]})\n  }\n\n  updateChats = async () => {\n    Axios.get('https://gh-api.com:3002/getChats')\n    .then(res => this.setState({chats: res.data}));\n  }\n\n  componentDidMount() \n  {\n    this.updateChats();\n    setInterval(this.updateChats, 1000)\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header />\n          <Route path=\"/projects/chatapp\" render={props => (\n            <React.Fragment>\n              <div style={{height: \"80vh\", border: \"1px solid black\", overflowX: \"hidden\", overflowY:\"auto\", display:\"flex\", flexDirection: \"column-reverse\"}}>\n                <div >\n                  <Chats chats={this.state.chats}/>\n                </div>\n              </div>\n              <AddChat className=\"chatBox\" newChat={this.newChat}/>\n            </React.Fragment>\n          )}></Route>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}